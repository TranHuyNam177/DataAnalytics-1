from datawarehouse import *
from automation.finance import getBankData


class BankFailedException(Exception):
    pass

def GetDataMonitor(func):

    def wrapper(*args):
        bank = args[0]
        run_date = args[1].strftime('%d.%m.%Y')
        outlook = Dispatch('outlook.application')
        mail = outlook.CreateItem(0)
        mail.To = 'hiepdang@phs.vn'
        try:
            table = func(*args)
            mail.Subject = f"BankCurrentBalance.{bank} for {run_date} Run Successfully"
            body = f"""
                <html>
                    <head></head>
                    <body>
                        <p style="font-family:Times New Roman; font-size:90%"><i>
                            -- Generated by Reporting System
                        </i></p>
                    </body>
                </html>
                """
            mail.HTMLBody = body
            mail.Send()
        except (Exception,):
            mail.Subject = f"BankCurrentBalance.{bank} for {run_date} Got Error"
            traceback_message = traceback.format_exc()
            body = f"""
                <html>
                    <head></head>
                    <body>
                        <p style="font-family:Consolas; font-size:90%">
                        {traceback_message}
                        </p>
                        <p style="font-family:Times New Roman; font-size:90%"><i>
                            -- Generated by Reporting System
                        </i></p>
                    </body>
                </html>
                """
            mail.HTMLBody = body
            mail.Send()
            raise BankFailedException(f"{bank} failed on {run_date}")
        return table

    return wrapper


@GetDataMonitor
def run(bank,fromDate,toDate):

    if bank == 'BIDV':
        bankObject = getBankData.BIDV(fromDate,toDate).Login()
    elif bank == 'EIB':
        bankObject = getBankData.EIB(fromDate,toDate).Login()
    elif bank == 'IVB':
        bankObject = getBankData.IVB(fromDate,toDate).Login()
    elif bank == 'VTB':
        bankObject = getBankData.VTB(fromDate,toDate).Login()
    elif bank == 'VCB':
        bankObject = getBankData.VCB(fromDate,toDate).Login()
    elif bank == 'OCB':
        bankObject = getBankData.OCB(fromDate,toDate).Login()
    else:
        raise ValueError(f'Invalid bank name: {bank}')

    zipObject = zip(
        [bankObject.TienGuiThanhToan,bankObject.TienGuiKyHan],
        ['BankCurrentBalance','BankDepositBalance'],
        [['BankCurrentBalance','Date','AccountNumber','Currency'],
         ['Bank','AccountNumber','IssueDate','ExpireDate']]
    )
    for func, dwhTable, checkCols in zipObject:
        bankObject, balanceTable = func()
        INSERT(connect_DWH_CoSo,dwhTable,balanceTable)
        DROP_DUPLICATES(connect_DWH_CoSo,*checkCols)  # xóa dòng trùng nhau

    bankObject.quit()

