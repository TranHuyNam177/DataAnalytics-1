from request import *
from datawarehouse import EXEC

class CheckToday:

    check_time = dt.datetime.now()

    ignored_Tables = [
        'v_sqlrun',
        'ExcludeDays',
        'ExecTaskLog',
        'bank_account_list',
        'de083',
        'breakeven_price_portfolio',
        'storerun',
        'VW_GETSEACCOUNTROOM_DB',
        'V_GETSECMARGINASSET',
        'V_GETSECMARGINRELEASE_MST1',
        'V_GETSECMARGINRELEASE_MST2',
        'V_GETSECMARGINRELEASE',
        'VW_MR0004',
        'vw_getsecmargindetail_detail',
        'vw_getsecmargindetail',
        'vw_mr0001_all',
        'BankTransactionHistory',
        'BankCurrentBalance',
        'BankDepositBalance',
    ]

    def __init__(self,db):

        if db == 'DWH-CoSo':
            self.conn = connect_DWH_CoSo
            self.db_Tables = TableNames_DWH_CoSo.squeeze()
            self._prefix = '[DWH-CoSo]'
            self.description = 'RunCoSo'
            self.since = dt.datetime.now()-dt.timedelta(minutes=30)

        elif db == 'DWH-PhaiSinh':
            self.conn = connect_DWH_PhaiSinh
            self.db_Tables = TableNames_DWH_PhaiSinh.squeeze()
            self._prefix = '[DWH-PhaiSinh]'
            self.description = 'RunPhaiSinh'
            self.since = dt.datetime.now()-dt.timedelta(minutes=30)

        else:
            raise ValueError('The module currently checks DWH-CoSo or DWH-PhaiSinh only')

        self.db_Tables = self.db_Tables.loc[~self.db_Tables.isin(self.ignored_Tables)]

        # check xem n phút vừa rồi có chạy chưa (n được quy định ở trên)
        run_check = pd.read_sql(
            f"""
            SELECT [ExecTaskLog].[EXEC_DATE] [TIME]
            FROM [ExecTaskLog]
            WHERE [ExecTaskLog].[EXEC_DATE] >= '{self.since.strftime("%Y-%m-%d %H:%M:%S")}'
                AND [ExecTaskLog].[STATUS] = 'START'
            """,
            self.conn,
        ).squeeze(axis=0)

        if run_check.empty: # nếu chưa chạy
            NotRunTables = self.db_Tables
        else: # nếu chạy rồi
            # check xem nếu chạy rồi thì có đủ bảng chưa
            self.run_Tables = pd.read_sql(
                f"""
                SELECT [ExecTaskLog].[DESCRIPTION]
                FROM [ExecTaskLog]
                WHERE [ExecTaskLog].[STATUS] = 'OK'
                AND [ExecTaskLog].[EXEC_DATE] >= (
                    SELECT MAX([ExecTaskLog].[EXEC_DATE]) [Time]
                    FROM [ExecTaskLog]
                    WHERE [ExecTaskLog].[STATUS] = 'START'
                    AND [ExecTaskLog].[DESCRIPTION] = '{self.description}'
                )
                """,
                self.conn,
            ).squeeze()
            NotRunTables = self.db_Tables.loc[~self.db_Tables.isin(self.run_Tables)]

        self.missing_Tables = NotRunTables.to_frame()
        self.missing_Tables.columns = ['Missing Tables']
        self.missing_Tables = self._prefix + '.[' + self.missing_Tables + ']'
        self.html_table = self.missing_Tables.to_html(index=False)
        self.html_table = self.html_table.replace('<tr>','<tr align="center">')  # center columns
        self.html_table = self.html_table.replace('border="1"','border="1" style="border-collapse:collapse"')  # make thinner borders


    def run(self):

        if self.missing_Tables.empty:
            content = f"""
                <p style="font-family:Times New Roman; font-size:100%"><i>
                    ĐỦ SỐ LƯỢNG BẢNG
                </i></p>
            """
        else:
            # HTML table for email
            content = self.html_table

        # Send mail
        body = f"""
        <html>
            <head></head>
            <body>
                {content}
                <p style="font-family:Times New Roman; font-size:90%"><i>
                    -- Generated by Reporting System
                </i></p>
            </body>
        </html>
        """

        outlook = Dispatch('outlook.application')
        mail = outlook.CreateItem(0)
        mapi = outlook.GetNamespace("MAPI")

        for account in mapi.Accounts:
            print(f"Account {account.DeliveryStore.DisplayName} is being logged")

        mail.To = 'hiepdang@phs.vn; tupham@phs.vn'
        mail.Subject = f"{self._prefix} Missing Tables {self.check_time.strftime('%Y-%m-%d %H:%M:%S')}"
        mail.HTMLBody = body
        mail.Send()


class CheckBackDate:

    """
    Được chạy vào:
        - Mon-Fri: 12:15, 18:00, 21:00
        - Sat-Sun: 01:00
    """

    check_time = dt.datetime.now()

    def __init__(self,db):

        if db == 'DWH-CoSo':
            self.conn = connect_DWH_CoSo
            self._prefix = '[DWH-CoSo]'
            self.sp = 'spRunCoSoLui'
            self.description = 'RunCoSoLui'
            self.since = dt.datetime.now()-dt.timedelta(minutes=60)

        elif db == 'DWH-PhaiSinh':
            self.conn = connect_DWH_PhaiSinh
            self._prefix = '[DWH-PhaiSinh]'
            self.sp = 'spRunCoSoLui'
            self.description = 'RunPhaiSinhLui'
            self.since = dt.datetime.now()-dt.timedelta(minutes=60)

        else:
            raise ValueError('The module currently checks DWH-CoSo or DWH-PhaiSinh only')

        hour = dt.datetime.now().hour
        if 22 <= hour <= 24 or 0 <= hour <= 5:
            self.days = 4
        else:
            self.days = 1

    def run(self):

        # check xem n phút vừa rồi có chạy chưa (n được quy định ở trên)
        checkTable = pd.read_sql(
            f"""
            SELECT [ExecTaskLog].[STATUS]
            FROM [ExecTaskLog]
            WHERE [ExecTaskLog].[EXEC_DATE] >= '{self.since.strftime("%Y-%m-%d %H:%M:%S")}'
                AND [ExecTaskLog].[DESCRIPTION] = '{self.description}'
            """,
            self.conn,
        ).squeeze().value_counts().reindex(['START','END']).fillna(0)

        if checkTable['START'] < self.days or checkTable['END'] < self.days:
            content = f"""
                <p style="font-family:Times New Roman; font-size:100%"><i>
                    UPDATE BACKDATE THẤT BẠI
                </i></p>
            """
        else:
            content = f"""
                <p style="font-family:Times New Roman; font-size:100%"><i>
                    UPDATE BACKDATE THÀNH CÔNG
                </i></p>
            """

        body = f"""
        <html>
            <head></head>
            <body>
                {content}
                <p style="font-family:Times New Roman; font-size:90%"><i>
                    -- Generated by Reporting System
                </i></p>
            </body>
        </html>
        """

        outlook = Dispatch('outlook.application')
        mail = outlook.CreateItem(0)
        mapi = outlook.GetNamespace("MAPI")

        for account in mapi.Accounts:
            print(f"Account {account.DeliveryStore.DisplayName} is being logged")

        mail.To = 'hiepdang@phs.vn; tupham@phs.vn'
        mail.Subject = f"{self._prefix} Check Update BackDate {self.check_time.strftime('%Y-%m-%d %H:%M:%S')}"
        mail.HTMLBody = body
        mail.Send()


